import pandas as pd
import os
import datetime
import requests
from time import time
import json

# Function to write logs
def writelogs(logs, logfile):
    print(logs)
    logfile.write("{}\n".format(logs))

# Main function to get virustotal report and save report as json file
if __name__ == "__main__":
    
    START_HASH = 0 #sample hash index to start analysing 
    END_HASH = 4067 #sample hash index to stop analysing 

    # File containing hashes to analyse
    hash_file = "to_analyse_4068.txt"

    apikey = "<insert apikey>" #Please get and insert apikey from virustotal account
    # Virustotal Report Api
    url = "https://www.virustotal.com/vtapi/v2/file/report"
    # Parameters to be given for the api
    params = {'apikey': apikey, 'resource':'<hash_value>'}

    # Get malware hashes
    with open(hash_file, "r") as txtfile:
        malhash_list = txtfile.readlines()
    malhash_list = [h.replace("\n", "") for h in malhash_list]
    print("Total length of hashes: {}".format(len(malhash_list)))

    # Create directory to put all json reports
    if not os.path.exists("json_reports"):
        os.mkdir("json_reports")

    # Log file
    logfile = open("logfile_{}.txt".format(datetime.datetime.now().strftime("%Y%m%d-%H%M%S")), "w+")

    # Get virustotal json reports
    for i in range(START_HASH, END_HASH+1):
        full_path = "json_reports/{}.json".format(malhash_list[i])
        # Check if current malware sample had been analysed before
        if not os.path.exists(full_path):
            params['resource'] = malhash_list[i]
            response = requests.get(url, params=params)
            # Receive error code
            if response.status_code != 200 and response.status_code != 204:
                logs = "{}) got error code {}; skipping {}".format(i, response.status_code, malhash_list[i])
                writelogs(logs, logfile)
            # No error code
            else:
                # Got timeout due to limit set for free account
                ## limit set: 4 queries per minute before the api rest for 30-60s
                if response.status_code == 204:
                    T0 = time()
                    # Keep querying and checking status code till the code turns 200
                    while 1:
                        response = requests.get(url, params=params)
                        if response.status_code == 200:
                            print("wait time = {}s".format(time()-T0))
                            break
                # Get the virustotal report
                return_report = response.json()
                # Check if the report is valid; valid if the report contains results from anti-virus scanners
                ## Log the sample if the report is invalid
                if "positives" not in return_report.keys():
                    logs="{}) not a valid report; skipping {}".format(i, malhash_list[i])
                    writelogs(logs, logfile)
                # Save the report if the report is valid
                else:
                    with open(full_path, "w+") as jsonfile:
                        json.dump(response.json(), jsonfile)
                        logs = "{}) {} json-report done".format(i, malhash_list[i])
                        writelogs(logs, logfile)
        # Skip sample if the sample had been analysed
        else:
            logs = "{}) {} exists; skipping it".format(i, full_path)
            writelogs(logs, logfile)

    # Close the logfile
    logfile.close()
    print("DONE")
